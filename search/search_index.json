{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n a los Algoritmos","text":"<p>Este documento presenta los conceptos fundamentales sobre algoritmos, sus caracter\u00edsticas, elementos principales y la clasificaci\u00f3n de datos. La estructura y estilo sigue el enfoque de documentaci\u00f3n t\u00e9cnica de la MDN Web Docs.</p>"},{"location":"#que-es-un-algoritmo","title":"\u00bfQu\u00e9 es un Algoritmo?","text":"<p>Un algoritmo es una secuencia finita de instrucciones, reglas o pasos que describen de modo preciso las operaciones que una computadora debe realizar para ejecutar una tarea en un tiempo finito\u301024\u2020source\u3011.</p> <p>Ejemplos de algoritmos en la vida real:</p> <ul> <li>Determinar en qu\u00e9 horario se realizan m\u00e1s publicaciones en enero.</li> <li>Calcular cu\u00e1ntas personas est\u00e1n en espera en determinado horario.</li> <li>Generar un ranking de los 5 pa\u00edses con m\u00e1s consultas\u301024\u2020source\u3011.</li> </ul>"},{"location":"#caracteristicas-de-un-algoritmo","title":"Caracter\u00edsticas de un Algoritmo","text":"<p>Un buen algoritmo debe ser:</p> <ul> <li> <p>Preciso: cada paso debe estar claramente definido.</p> </li> <li> <p>Correcto: debe resolver el problema planteado.</p> </li> <li>Definido: el mismo conjunto de datos de entrada debe producir siempre la misma salida.</li> <li>Finito: debe terminar en alg\u00fan momento\u301024\u2020source\u3011.</li> </ul>"},{"location":"#elementos-de-un-algoritmo","title":"Elementos de un Algoritmo","text":"<p>Los algoritmos est\u00e1n compuestos por tres elementos principales\u301024\u2020source\u3011:</p> <ol> <li> <p>Datos</p> </li> <li> <p>Informaci\u00f3n de entrada o salida.</p> </li> <li> <p>Se clasifican en distintos tipos.</p> </li> <li> <p>Acciones</p> </li> <li> <p>Operaciones que transforman los datos.</p> </li> <li> <p>Operadores</p> </li> <li> <p>Elementos que permiten construir expresiones o condiciones.</p> </li> </ol>"},{"location":"#tipos-de-datos","title":"Tipos de Datos","text":"<p>Los datos representan informaci\u00f3n utilizada por los algoritmos. Se dividen en:</p>"},{"location":"#simples","title":"Simples","text":"<ul> <li>Num\u00e9ricos: representan cantidades o valores (ej: edad, salario).</li> <li>Alfanum\u00e9ricos: representan texto (ej: nombre, apellido). No se pueden operar matem\u00e1ticamente.</li> <li>L\u00f3gicos (booleanos): s\u00f3lo pueden tomar dos valores (Verdadero/Falso). Ejemplo: estado de un sem\u00e1foro\u301024\u2020source\u3011.</li> </ul>"},{"location":"#estructurados","title":"Estructurados","text":"<ul> <li>Conjuntos de datos simples agrupados.</li> <li>Se ver\u00e1n m\u00e1s adelante (registros, secuencias, archivos).</li> </ul>"},{"location":"#variables-y-constantes","title":"Variables y Constantes","text":""},{"location":"#variables","title":"Variables","text":"<p>Representan una direcci\u00f3n de memoria que puede cambiar durante la ejecuci\u00f3n del algoritmo.</p> <pre><code>// Ejemplo de variables\nstock := 50\ncantidad_estudiantes := 32\n</code></pre>"},{"location":"#constantes","title":"Constantes","text":"<p>Representan una direcci\u00f3n de memoria cuyo contenido no cambia durante la ejecuci\u00f3n.</p> <pre><code>// Ejemplo de constantes\nIVA := 0.21\nPI := 3.14159\n</code></pre>"},{"location":"#acciones","title":"Acciones","text":"<p>Una acci\u00f3n es un acontecimiento que ocurre en un tiempo finito y produce un cambio de estado\u301024\u2020source\u3011.</p>"},{"location":"#tipos-de-acciones","title":"Tipos de acciones","text":"<ul> <li>Asignaci\u00f3n: asignar un valor a una variable.</li> <li>Condicionales: tomar decisiones seg\u00fan una condici\u00f3n.</li> <li>Repetitivas: ejecutar un bloque varias veces.</li> <li>Con nombre: agrupaciones de instrucciones (subacciones, funciones, procedimientos).</li> </ul>"},{"location":"#asignacion","title":"Asignaci\u00f3n","text":"<p>La asignaci\u00f3n reemplaza el valor anterior de una variable por un nuevo valor. Es una acci\u00f3n destructiva, ya que se pierde el valor previo\u301024\u2020source\u3011.</p>"},{"location":"#ejemplo-asignacion-pura","title":"Ejemplo: Asignaci\u00f3n Pura","text":"<pre><code>// Ejemplo de sem\u00e1foro\nsemaforo := \"Rojo\"\nsemaforo := \"Verde\"\nsemaforo := \"Amarillo\"\n</code></pre>"},{"location":"#ejemplo-asignacion-de-expresion-algebraica","title":"Ejemplo: Asignaci\u00f3n de Expresi\u00f3n Algebraica","text":"<pre><code>descuento := importe / 2\n</code></pre>"},{"location":"#ejemplo-asignacion-de-funcion","title":"Ejemplo: Asignaci\u00f3n de Funci\u00f3n","text":"<pre><code>examen := REDOND(puntaje)\n</code></pre>"},{"location":"#ejemplo-contadores-y-acumuladores","title":"Ejemplo: Contadores y Acumuladores","text":"<pre><code>billetes := billetes + 1   // contador\ndinero := dinero + billete // acumulador\n</code></pre>"},{"location":"02-secuenciales-condicionales/","title":"Estructuras Secuenciales y Condicionales","text":"<p>Este documento presenta las estructuras de control secuenciales y condicionales, con teor\u00eda, ejemplos y pseudoc\u00f3digo. El estilo sigue la estructura de documentaci\u00f3n t\u00e9cnica inspirada en la MDN.</p>"},{"location":"02-secuenciales-condicionales/#estructuras-de-control","title":"Estructuras de Control","text":"<p>Las estructuras de control determinan el orden en el que se ejecutan las instrucciones de un algoritmo.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Cada estructura tiene un \u00fanico punto de entrada y un \u00fanico punto de salida.</li> <li>Puede estar formada por sentencias o por otras estructuras de control\u301025\u2020source\u3011.</li> </ul>"},{"location":"02-secuenciales-condicionales/#estructuras-secuenciales","title":"Estructuras Secuenciales","text":"<p>La ejecuci\u00f3n comienza con la primera instrucci\u00f3n del algoritmo y contin\u00faa en orden hasta la \u00faltima.</p> <p>Cada sentencia se ejecuta una sola vez\u301025\u2020source\u3011.</p>"},{"location":"02-secuenciales-condicionales/#ejemplo-calculo-de-porcentaje","title":"Ejemplo: c\u00e1lculo de porcentaje","text":"<p>Problema: Dado un importe, obtener su 10%.</p> <pre><code>Accion Porcentaje Es\nAmbiente\n\n   importe: numerico\nProceso\n   Esc(\"Ingrese importe\")\n   Leer(importe)\n   Esc(\"El 10% es\", 10*importe/100)\nFin Accion\n\n</code></pre>"},{"location":"02-secuenciales-condicionales/#estructuras-condicionales","title":"Estructuras Condicionales","text":"<p>Cuando es necesario tomar decisiones en un algoritmo, se utilizan estructuras condicionales. Se basan en la evaluaci\u00f3n de una expresi\u00f3n l\u00f3gica\u301025\u2020source\u3011.</p>"},{"location":"02-secuenciales-condicionales/#tipos-de-condicionales","title":"Tipos de condicionales","text":"<ol> <li> <p>Simple: una sola acci\u00f3n si se cumple la condici\u00f3n.</p> </li> <li> <p>Alternativa (doble): una acci\u00f3n si se cumple, otra si no.</p> </li> <li>M\u00faltiple: varias alternativas seg\u00fan el valor de una expresi\u00f3n.</li> </ol>"},{"location":"02-secuenciales-condicionales/#condicional-simple","title":"Condicional Simple","text":"<p>Ejecuta una serie de instrucciones solo si la condici\u00f3n es verdadera.</p> <pre><code>Si condicion_se_cumple Entonces\n   accion_1\n   accion_2\nFinSi\n</code></pre> <p>Ejemplo: Verificar si un n\u00famero es positivo.</p> <pre><code>Accion EjemploCS Es\nAmbiente\n   x: numerico\nProceso\n   Esc(\"Ingrese un valor\")\n   Leer(x)\n   Si x &gt; 0 Entonces\n      Esc(\"El n\u00famero es positivo\")\n   FinSi\nFin Accion\n</code></pre>"},{"location":"02-secuenciales-condicionales/#condicional-alternativa","title":"Condicional Alternativa","text":"<p>Permite ejecutar un bloque si la condici\u00f3n se cumple, y otro bloque si no se cumple.</p> <pre><code>Si condicion Entonces\n   acciones_si\nContrario\n   acciones_no\nFinSi\n</code></pre> <p>Ejemplo: Comparar dos n\u00fameros.</p> <pre><code>Accion MayorMenor Es\nAmbiente\n   a, b: numerico\nProceso\n   Esc(\"Ingrese primer n\u00famero\")\n   Leer(a)\n   Esc(\"Ingrese segundo n\u00famero\")\n   Leer(b)\n   Si a &gt; b Entonces\n      Esc(\"El primero es mayor\")\n   Contrario\n      Esc(\"El segundo es mayor o igual\")\n   FinSi\nFin Accion\n</code></pre>"},{"location":"02-secuenciales-condicionales/#condicional-multiple","title":"Condicional M\u00faltiple","text":"<p>Permite elegir entre varias alternativas seg\u00fan el valor de una variable o expresi\u00f3n.</p> <pre><code>Segun variable Hacer\n   valor1: acciones_1\n   valor2: acciones_2\n   Otro: acciones_defecto\nFinSegun\n</code></pre> <p>Ejemplo: Determinar la estaci\u00f3n del a\u00f1o a partir de un n\u00famero de mes.</p> <pre><code>Accion Estacion Es\nAmbiente\n   mes: entero\nProceso\n   Esc(\"Ingrese un n\u00famero de mes\")\n   Leer(mes)\n   Segun mes Hacer\n      12,1,2: Esc(\"Verano\")\n      3,4,5: Esc(\"Oto\u00f1o\")\n      6,7,8: Esc(\"Invierno\")\n      9,10,11: Esc(\"Primavera\")\n      Otro: Esc(\"Mes inv\u00e1lido\")\n   FinSegun\nFin Accion\n</code></pre>"},{"location":"02-secuenciales-condicionales/#resumen","title":"Resumen","text":"<ul> <li>Secuenciales: todas las instrucciones se ejecutan en orden.</li> <li>Condicionales simples: ejecutan acciones solo si la condici\u00f3n es verdadera.</li> <li>Condicionales alternativas: permiten un camino u otro.</li> <li>Condicionales m\u00faltiples: seleccionan entre varias opciones.</li> </ul> <p>Estas estructuras son la base para controlar el flujo de cualquier algoritmo.</p>"},{"location":"03-repetitivas/","title":"Estructuras Repetitivas","text":"<p>Este documento explica las estructuras repetitivas (o ciclos), junto con los recursos b\u00e1sicos necesarios: contadores, acumuladores y banderas. Se incluyen ejemplos de pseudoc\u00f3digo siguiendo el estilo de documentaci\u00f3n t\u00e9cnica inspirada en MDN.</p>"},{"location":"03-repetitivas/#recursos-fundamentales","title":"Recursos Fundamentales","text":""},{"location":"03-repetitivas/#contadores","title":"Contadores","text":"<p>Son variables que llevan la cuenta de cu\u00e1ntas veces ocurre un evento. Se incrementan o decrementan en valores constantes.</p> <pre><code>contador := contador + 1\n</code></pre> <p>Ejemplo: Sensor de aforo que incrementa cada vez que entra una persona.</p>"},{"location":"03-repetitivas/#acumuladores","title":"Acumuladores","text":"<p>Son variables que suman cantidades variables (no constantes). Sirven para almacenar totales.</p> <pre><code>acumula := acumula + valor\n</code></pre> <p>Ejemplo: Robot que acumula kilos de basura espacial recolectados.</p>"},{"location":"03-repetitivas/#banderas","title":"Banderas","text":"<p>Son variables l\u00f3gicas (booleanas) que indican si ocurri\u00f3 o no un evento.</p> <pre><code>bandera := V   // verdadero\nbandera := F   // falso\n</code></pre> <p>Ejemplo: Encender o apagar luces seg\u00fan el horario configurado (7PM a 6AM).</p>"},{"location":"03-repetitivas/#concepto-de-iteracion","title":"Concepto de Iteraci\u00f3n","text":"<p>La iteraci\u00f3n es la repetici\u00f3n de un conjunto de acciones bajo ciertas condiciones. Cada vuelta del ciclo se denomina bucle\u301016\u2020source\u3011.</p>"},{"location":"03-repetitivas/#clasificacion-de-ciclos","title":"Clasificaci\u00f3n de Ciclos","text":"<ol> <li> <p>Definidos: sabemos de antemano cu\u00e1ntas veces se repite.</p> </li> <li> <p>Ejemplo: ejecutar una acci\u00f3n 10 veces.</p> </li> <li> <p>Indefinidos: no sabemos la cantidad exacta de repeticiones.</p> </li> <li> <p>Ejemplo: pedir n\u00fameros hasta que se ingrese un valor negativo.</p> </li> </ol> <p>Los ciclos tambi\u00e9n se clasifican en Pre-Test y Post-Test seg\u00fan el momento en que se eval\u00faa la condici\u00f3n\u301016\u2020source\u3011.</p>"},{"location":"03-repetitivas/#ciclo-pre-test","title":"Ciclo Pre-Test","text":"<p>La condici\u00f3n se eval\u00faa antes de ejecutar el bloque. Puede repetirse 0 o m\u00e1s veces.</p> <pre><code>total := 0\nEsc(\"Ingrese primer n\u00famero\")\nLeer(num)\n\nMientras num &gt;= 0 Hacer\n   total := total + num\n   Esc(\"Ingrese otro n\u00famero\")\n   Leer(num)\nFinMientras\n\nEsc(\"La suma total es\", total)\n</code></pre> <p>Ejemplo real: sumar los n\u00fameros ingresados en un juego hasta que el usuario escriba un valor negativo.</p>"},{"location":"03-repetitivas/#ciclo-post-test","title":"Ciclo Post-Test","text":"<p>La condici\u00f3n se eval\u00faa despu\u00e9s de ejecutar el bloque. Garantiza al menos una ejecuci\u00f3n.</p> <pre><code>clavecorrecta := 123\nRepetir\n   Esc(\"Introduce la clave\")\n   Leer(intento)\nHasta que intento = clavecorrecta\n</code></pre> <p>Ejemplo real: pedir una contrase\u00f1a hasta que coincida con la correcta.</p>"},{"location":"03-repetitivas/#ciclo-definido-por-contador","title":"Ciclo Definido por Contador","text":"<p>Se utiliza cuando se conoce de antemano la cantidad de repeticiones. Generalmente implementado con PARA.</p> <pre><code>Para i := 1 Hasta 5 Hacer\n   Esc(\"Iteraci\u00f3n n\u00famero\", i)\nFinPara\n</code></pre> <p>Ejemplo real: mostrar un mensaje 5 veces.</p>"},{"location":"03-repetitivas/#resumen","title":"Resumen","text":"<ul> <li>Contadores, acumuladores y banderas son recursos b\u00e1sicos para construir algoritmos repetitivos.</li> <li> <p>Pre-Test: condici\u00f3n antes del bloque (0 o m\u00e1s repeticiones).</p> </li> <li> <p>Post-Test: condici\u00f3n despu\u00e9s del bloque (1 o m\u00e1s repeticiones).</p> </li> <li>Definidos por contador: n\u00famero de repeticiones conocidas de antemano.</li> </ul> <p>Estas estructuras son esenciales para automatizar procesos donde la repetici\u00f3n es necesaria.</p>"},{"location":"04-funciones-procedimientos/","title":"Subacciones: Funciones y Procedimientos","text":"<p>En esta p\u00e1gina se describen las subacciones y sus dos formas principales: funciones y procedimientos. Se cubren conceptos, reglas de dise\u00f1o, sintaxis de pseudoc\u00f3digo y ejemplos completos.</p>"},{"location":"04-funciones-procedimientos/#vision-general","title":"Visi\u00f3n general","text":"<ul> <li>Subacci\u00f3n: m\u00f3dulo que realiza una tarea espec\u00edfica dentro de una acci\u00f3n principal.</li> <li>Se escribe una sola vez y puede invocarse m\u00faltiples veces desde el algoritmo principal o desde otras subacciones.</li> <li>Mejora la legibilidad, reutilizaci\u00f3n y mantenimiento (estrategia de divide y vencer\u00e1s).</li> </ul>"},{"location":"04-funciones-procedimientos/#control-de-ejecucion","title":"Control de ejecuci\u00f3n","text":"<p>Cuando el algoritmo principal llama a una subacci\u00f3n:</p> <ol> <li>Se detiene la ejecuci\u00f3n del llamador.</li> <li>Se ejecuta la subacci\u00f3n hasta finalizar su tarea.</li> <li>El control retorna al punto siguiente a la llamada.</li> </ol> <p>Este comportamiento aplica tanto a funciones como a procedimientos.</p>"},{"location":"04-funciones-procedimientos/#elementos-de-una-subaccion","title":"Elementos de una subacci\u00f3n","text":"<ol> <li> <p>Nombre</p> </li> <li> <p>Debe ser representativo del objetivo del m\u00f3dulo.</p> </li> <li> <p>Debe ser \u00fanico y no debe colisionar con palabras reservadas del pseudolenguaje.</p> </li> <li> <p>Par\u00e1metros</p> </li> <li> <p>Mecanismo para pasar datos entre el algoritmo principal y la subacci\u00f3n.</p> </li> <li>Pueden ser de entrada (datos que recibe) y/o salida (datos que devuelve por referencia o por resultado, seg\u00fan el modelo did\u00e1ctico que uses).</li> </ol>"},{"location":"04-funciones-procedimientos/#reglas-practicas-de-parametros","title":"Reglas pr\u00e1cticas de par\u00e1metros","text":"<ul> <li>Cantidad: el n\u00famero de par\u00e1metros formales debe coincidir con el de argumentos al invocar.</li> <li>Orden y tipos: los par\u00e1metros en la llamada deben ser compatibles en tipo y posici\u00f3n con los formales.</li> </ul>"},{"location":"04-funciones-procedimientos/#procedimientos","title":"Procedimientos","text":"<p>Un procedimiento es una subacci\u00f3n que no devuelve un valor como resultado de la llamada. Puede modificar par\u00e1metros de salida y/o producir efectos (por ejemplo, imprimir o escribir en una estructura).</p>"},{"location":"04-funciones-procedimientos/#plantilla-pseudocodigo","title":"Plantilla (pseudoc\u00f3digo)","text":"<pre><code>SUBACCI\u00d3N NombreProcedimiento(par\u00e1metros_formales) ES\n    // Declaraciones locales (si fueran necesarias)\n    // Acciones\nFINSUBACCI\u00d3N\n\n</code></pre>"},{"location":"04-funciones-procedimientos/#ejemplo-lectura-de-entradas","title":"Ejemplo: Lectura de entradas","text":"<pre><code>SUBACCI\u00d3N ObtenerEntradas ES\n    Esc(\"Ingrese valor\")\n    Leer(valor)\nFINSUBACCI\u00d3N\n\nACCION Principal ES\nAMBIENTE\n    valor: entero\nPROCESO\n    ObtenerEntradas\n    // ... seguir usando 'valor'\nFINACCION\n</code></pre>"},{"location":"04-funciones-procedimientos/#funciones","title":"Funciones","text":"<p>Una funci\u00f3n es una subacci\u00f3n que recibe argumentos y devuelve un \u00fanico resultado. Suele usarse dentro de expresiones o asignaciones.</p>"},{"location":"04-funciones-procedimientos/#plantilla-pseudocodigo_1","title":"Plantilla (pseudoc\u00f3digo)","text":"<pre><code>FUNCION NombreFuncion(par\u00e1metros_formales): TipoDevuelto\n\n    // Declaraciones locales (si fueran necesarias)\n    // Acciones\n    NombreFuncion := &lt;expresi\u00f3n_resultado&gt;\nFINFUNCION\n</code></pre>"},{"location":"04-funciones-procedimientos/#ejemplo-1-mayor-de-3","title":"Ejemplo 1: Mayor de 3","text":"<pre><code>FUNCION MayorDe3(a,b,c: entero): entero\n    Si a &gt;= b y a &gt;= c Entonces\n        MayorDe3 := a\n    Contrario\n        Si b &gt;= a y b &gt;= c Entonces\n            MayorDe3 := b\n        Contrario\n            MayorDe3 := c\n        FinSi\n    FinSi\nFINFUNCION\n</code></pre>"},{"location":"04-funciones-procedimientos/#ejemplo-2-dos-digitos-iguales-correccion-de-retorno","title":"Ejemplo 2: Dos d\u00edgitos iguales (correcci\u00f3n de retorno)","text":"<p>Dado un n\u00famero de 2 cifras, determinar si es pal\u00edndromo (igual le\u00eddo al derecho y al rev\u00e9s). Devuelve 1 si lo es, 0 si no.</p> <pre><code>FUNCION DosCifrasIguales(n: entero): entero\n    // Separar decenas y unidades\n    dec := n DIV 10\n    uni := n MOD 10\n    Si dec = uni Entonces\n        DosCifrasIguales := 1\n\n    Contrario\n        DosCifrasIguales := 0\n    FinSi\nFINFUNCION\n</code></pre>"},{"location":"04-funciones-procedimientos/#parametros-de-entrada-y-salida","title":"Par\u00e1metros de entrada y salida","text":""},{"location":"04-funciones-procedimientos/#terminologia-util","title":"Terminolog\u00eda \u00fatil","text":"<ul> <li>Formales (o ficticios): se declaran en la definici\u00f3n del m\u00f3dulo.</li> <li>Actuales (o argumentos): se suministran en la llamada.</li> </ul>"},{"location":"04-funciones-procedimientos/#ejemplo-contar-pares-con-procedimiento-auxiliar","title":"Ejemplo: Contar pares con procedimiento auxiliar","text":"<pre><code>SUBACCI\u00d3N ContarPares(n: entero; pares: entero) ES\n    // 'pares' act\u00faa como salida (por referencia en el modelo did\u00e1ctico)\n    Si (n MOD 2 = 0) Entonces\n        pares := pares + 1\n    FinSi\nFINSUBACCI\u00d3N\n\nACCION Principal ES\nAMBIENTE\n    i, v, pares: entero\nPROCESO\n    pares := 0\n    Para i := 1 Hasta 100 Hacer\n        Leer(v)\n        ContarPares(v, pares)\n    FinPara\n    Esc(\"Cantidad de n\u00fameros pares:\", pares)\nFINACCION\n</code></pre>"},{"location":"04-funciones-procedimientos/#ejemplo-uso-de-funcion-dentro-de-un-algoritmo","title":"Ejemplo: Uso de funci\u00f3n dentro de un algoritmo","text":"<pre><code>ACCION SerieDosCifras ES\nAMBIENTE\n    i, v, cant: entero\nPROCESO\n    cant := 0\n    Para i := 1 Hasta 20 Hacer\n\n        Leer(v)\n        cant := cant + DosCifrasIguales(v)\n    FinPara\n    Esc(\"Cantidad de pal\u00edndromos de 2 d\u00edgitos:\", cant)\nFINACCION\n</code></pre>"},{"location":"04-funciones-procedimientos/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Nombres claros: describen qu\u00e9 hace la subacci\u00f3n (por ejemplo, <code>CalcularPromedio</code> en lugar de <code>Proc1</code>).</li> <li>Responsabilidad \u00fanica: cada subacci\u00f3n debe resolver una tarea concreta.</li> <li>Evitar efectos colaterales inesperados: documenta qu\u00e9 par\u00e1metros son de entrada/salida.</li> <li>Validaciones: comprueba supuestos (por ejemplo, dominios de entrada) al inicio del m\u00f3dulo.</li> </ul>"},{"location":"04-funciones-procedimientos/#errores-frecuentes-y-como-evitarlos","title":"Errores frecuentes (y c\u00f3mo evitarlos)","text":"<ul> <li>No asignar el valor de la funci\u00f3n antes de <code>FINFUNCION</code> \u2192 Asegur\u00e1 siempre <code>NombreFuncion := ...</code>.</li> <li>Desorden o cantidad incorrecta de par\u00e1metros \u2192 Verific\u00e1 orden, cantidad y tipos.</li> <li>Nombres ambiguos o reservados \u2192 Eleg\u00ed identificadores v\u00e1lidos y expresivos.</li> </ul>"},{"location":"04-funciones-procedimientos/#resumen","title":"Resumen","text":"<ul> <li>Las subacciones encapsulan tareas y favorecen dise\u00f1o modular.</li> <li>Procedimientos: no devuelven valor; pueden producir efectos y modificar par\u00e1metros de salida.</li> <li>Funciones: devuelven un \u00fanico resultado y son \u00fatiles dentro de expresiones.</li> <li>Gestion\u00e1 correctamente nombres y par\u00e1metros (cantidad, orden, tipo) para llamadas seguras.</li> </ul>"},{"location":"05-secuencias-datos/","title":"Secuencias de Datos Elementales","text":"<p>Esta p\u00e1gina introduce el concepto de secuencias de datos elementales, sus caracter\u00edsticas, clasificaci\u00f3n y el pseudoc\u00f3digo est\u00e1ndar para su tratamiento (acciones predefinidas <code>ARR</code>, <code>AVZ</code>, <code>CREAR</code>, <code>ESCRIBIR</code>, <code>CERRAR</code>).</p>"},{"location":"05-secuencias-datos/#que-es-una-secuencia-de-datos-elementales","title":"\u00bfQu\u00e9 es una Secuencia de Datos Elementales?","text":"<p>Es un conjunto de datos relacionados que se almacena en memoria externa (disco, pendrive, etc.). La secuencia presenta orden y posee un primer y \u00faltimo elemento; adem\u00e1s, debe estar definido un indicador de fin de secuencia.</p>"},{"location":"05-secuencias-datos/#caracteristicas-clave","title":"Caracter\u00edsticas clave","text":"<ul> <li>Primer elemento: desde \u00e9l se accede al resto por sucesi\u00f3n.</li> <li>Relaci\u00f3n de sucesi\u00f3n: cada elemento (salvo el \u00faltimo) precede a otro; cada elemento (salvo el primero) sucede a otro.</li> <li> <p>\u00daltimo elemento: toda secuencia tiene un final bien definido.</p> </li> <li> <p>Fin de secuencia (FDS): puede ser una marca (sentinela) o una cantidad conocida de elementos.</p> </li> </ul> <p>Ejemplos de FDS</p> <ul> <li>Num\u00e9rica con marca: <code>... 1990 1994 1992 2000 1998 -1</code> (termina en <code>-1</code>).</li> <li>Caracteres con marca: <code>A C 2 5 6 X E A F 3 2 5 B B %</code> (termina en <code>%</code>).</li> <li>Definida por cantidad: \"primeros 4 promedios del a\u00f1o\".</li> </ul>"},{"location":"05-secuencias-datos/#clasificaciones-principales","title":"Clasificaciones principales","text":""},{"location":"05-secuencias-datos/#por-contenido","title":"Por contenido","text":"<ul> <li>Num\u00e9ricas (enteros, reales)</li> <li>De caracteres (c\u00f3digos, patentes, etc.)</li> <li>De registros (se ver\u00e1 en temas posteriores)</li> </ul>"},{"location":"05-secuencias-datos/#por-cantidad-de-elementos","title":"Por cantidad de elementos","text":"<ul> <li>Definidas: se conoce la cantidad (p. ej., 10 elementos).</li> <li>Indefinidas: no se conoce la cantidad; se usa marca o condici\u00f3n de fin.</li> </ul>"},{"location":"05-secuencias-datos/#por-pureza","title":"Por pureza","text":"<ul> <li>Puras: todos los elementos pertenecen a la misma especie y el \u00faltimo se trata igual que los dem\u00e1s. Suelen manejarse con post-test.</li> <li>Impuras: incluyen un elemento extra\u00f1o (marca) que no se procesa; se manejan con pre-test.</li> </ul>"},{"location":"05-secuencias-datos/#pseudocodigo-acciones-predefinidas","title":"Pseudoc\u00f3digo: Acciones predefinidas","text":"<p>Estas acciones aseguran el acceso secuencial correcto a los elementos.</p> <ul> <li><code>ARR(nombre_secuencia)</code> \u2192 Arrancar el tratamiento de una secuencia existente.</li> <li><code>AVZ(nombre_secuencia, var)</code> \u2192 Avanzar y recuperar el siguiente elemento en <code>var</code>.</li> <li><code>CREAR(nombre_secuencia_salida)</code> \u2192 Inicializa una nueva secuencia vac\u00eda (solo para salida).</li> <li><code>ESCRIBIR(nombre_secuencia_salida, var)</code> \u2192 Agrega <code>var</code> a la secuencia de salida creada.</li> <li><code>CERRAR(nombre_secuencia)</code> \u2192 Finaliza el tratamiento de la secuencia (libera recursos / asegura persistencia).</li> </ul>"},{"location":"05-secuencias-datos/#declaracion-tipica-en-el-ambiente","title":"Declaraci\u00f3n t\u00edpica en el Ambiente","text":"<pre><code>ACCION Secu ES\nAMBIENTE\n   sec: Secuencia de [tipo_dato]\n   sal: Secuencia de [tipo_dato]\n   v:   [tipo_dato]\nPROCESO\n   // ...\nFINACCION\n</code></pre>"},{"location":"05-secuencias-datos/#esquemas-de-recorrido-patrones","title":"Esquemas de recorrido (patrones)","text":""},{"location":"05-secuencias-datos/#esquema-no1-pre-test-impura-con-marca","title":"Esquema N\u00ba1 \u2014 Pre-test (impura con marca)","text":"<p>Cuenta elementos antes de tratar el FDS.</p> <pre><code>\nACCION esquema_1 ES\nAMBIENTE\n  S: secuencia de caracter\n  v: caracter\n  cont: entero\nPROCESO\n  ARR(S)\n  cont := 0\n  AVZ(S, v)\n  Mientras v &lt;&gt; '#' Hacer\n     cont := cont + 1\n     AVZ(S, v)\n  FinMientras\n  ESC(\"Elementos en la secuencia = \", cont)\nFINACCION\n\n</code></pre>"},{"location":"05-secuencias-datos/#esquema-no2-post-test-pura-definida-por-marca-final","title":"Esquema N\u00ba2 \u2014 Post-test (pura definida por marca final)","text":"<p>Procesa incluyendo el \u00faltimo elemento v\u00e1lido y termina al ver la marca.</p> <pre><code>ACCION esquema_2 ES\nAMBIENTE\n  S: secuencia de entero\n  v, cont: entero\nPROCESO\n  ARR(S)\n  cont := 0\n  Repetir\n     AVZ(S, v)\n     cont := cont + 1\n  Hasta que v = 999\n  ESCRIBIR(cont)\nFINACCION\n</code></pre>"},{"location":"05-secuencias-datos/#esquema-no3-definida-por-cantidad-contador-para","title":"Esquema N\u00ba3 \u2014 Definida por cantidad (contador <code>PARA</code>)","text":"<p>Lee exactamente N elementos.</p> <pre><code>ACCION esquema_3 ES\nAMBIENTE\n  S: secuencia de entero\n  v, i: entero\nPROCESO\n  ARR(S)\n  Para i := 1 Hasta 10 Hacer\n     AVZ(S, v)\n     ESC(v)\n  FinPara\nFINACCION\n</code></pre>"},{"location":"05-secuencias-datos/#ejemplos-practicos-de-tratamiento","title":"Ejemplos pr\u00e1cticos de tratamiento","text":""},{"location":"05-secuencias-datos/#copiar-de-una-secuencia-a-otra-indefinida-impura","title":"Copiar de una secuencia a otra (indefinida impura)","text":"<pre><code>ACCION CopiarSecuencia ES\nAMBIENTE\n  ent: Secuencia de caracter\n  sal: Secuencia de caracter\n  x: caracter\nPROCESO\n  ARR(ent)\n  CREAR(sal)\n  AVZ(ent, x)\n  Mientras x &lt;&gt; '%' Hacer\n     ESCRIBIR(sal, x)\n     AVZ(ent, x)\n  FinMientras\n  CERRAR(sal)\nFINACCION\n</code></pre>"},{"location":"05-secuencias-datos/#contar-mayores-que-un-umbral-definida-por-cantidad","title":"Contar mayores que un umbral (definida por cantidad)","text":"<pre><code>ACCION ContarMayores ES\nAMBIENTE\n\n  ent: Secuencia de entero\n  i, v, umbral, cuenta: entero\nPROCESO\n  ARR(ent)\n  cuenta := 0\n  umbral := 100\n  Para i := 1 Hasta 20 Hacer\n     AVZ(ent, v)\n     Si v &gt; umbral Entonces\n        cuenta := cuenta + 1\n     FinSi\n  FinPara\n  ESC(\"Mayores a \", umbral, \": \", cuenta)\nFINACCION\n</code></pre>"},{"location":"05-secuencias-datos/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Eleg\u00ed pre-test si trabaj\u00e1s con marca (impura) y el elemento de fin no debe procesarse.</li> <li>Eleg\u00ed post-test en secuencias puras para asegurar al menos una lectura y tratar por igual el \u00faltimo.</li> <li>Declarar una variable de trabajo (buffer) para <code>AVZ</code> del mismo tipo que la secuencia.</li> <li>Record\u00e1 cerrar secuencias de salida (<code>CERRAR</code>) para garantizar persistencia.</li> </ul>"},{"location":"05-secuencias-datos/#resumen","title":"Resumen","text":"<ul> <li>Las secuencias se recorren de forma secuencial con <code>ARR</code> y <code>AVZ</code>.</li> <li>El fin de secuencia es imprescindible (marca o cantidad).</li> <li>Us\u00e1 el esquema que corresponda: pre-test (impura), post-test (pura) o definida (contador).</li> <li><code>CREAR/ESCRIBIR/CERRAR</code> habilitan la generaci\u00f3n de nuevas secuencias de salida.</li> </ul>"},{"location":"06-subsecuencias/","title":"Subsecuencias","text":"<p>En esta p\u00e1gina se presentan los fundamentos de subsecuencias dentro de secuencias de datos elementales, su clasificaci\u00f3n (enlazadas y jer\u00e1rquicas), criterios de inicio/fin y patrones de tratamiento con pseudoc\u00f3digo.</p>"},{"location":"06-subsecuencias/#ideas-clave","title":"Ideas clave","text":"<ul> <li>Una secuencia es un conjunto homog\u00e9neo y ordenado de elementos.</li> <li>Una subsecuencia es un conjunto de elementos consecutivos dentro de una secuencia principal, definido por reglas de inicio y fin.</li> <li>Las subsecuencias heredan las propiedades de la secuencia de la que forman parte (orden, fin, homogeneidad del tipo de dato, etc.).</li> </ul>"},{"location":"06-subsecuencias/#definiciones-frecuentes","title":"Definiciones frecuentes","text":""},{"location":"06-subsecuencias/#subsecuencia-palabra","title":"Subsecuencia PALABRA","text":"<p>Subconjunto de elementos consecutivos de una secuencia de caracteres que:</p> <ul> <li>empieza en un car\u00e1cter distinto de espacio (<code>' '</code>), y</li> <li>termina en un espacio o en una marca definida por el problema (p. ej., final de palabra, fin de secuencia, etc.).</li> </ul>"},{"location":"06-subsecuencias/#subsecuencia-oracion","title":"Subsecuencia ORACI\u00d3N","text":"<p>Subconjunto de elementos consecutivos de una secuencia de caracteres que:</p> <ul> <li>empieza en un car\u00e1cter distinto de espacio (<code>' '</code>), y</li> <li>termina en un delimitador final de oraci\u00f3n (p. ej., <code>'.'</code>) u otra marca especificada.</li> </ul> <p>Palabra con contenido: cadena de caracteres no blancos que finaliza en <code>'.'</code> o en blanco.</p> <p>Palabra vac\u00eda: cadena de blancos consecutivos que finaliza en un car\u00e1cter no blanco.</p>"},{"location":"06-subsecuencias/#tipos-de-relacion-entre-subsecuencias","title":"Tipos de relaci\u00f3n entre subsecuencias","text":""},{"location":"06-subsecuencias/#1-subsecuencias-enlazadas","title":"1) Subsecuencias enlazadas","text":"<ul> <li>Las subsecuencias se encadenan una detr\u00e1s de otra.</li> <li>Al terminar una subsecuencia, comienza la siguiente.</li> <li>Ejemplo cl\u00e1sico: secuencia de caracteres que almacena c\u00f3digos de 4 d\u00edgitos en serie (<code>1 3 2 5  4 8 9 0  ...</code>). Cada bloque de 4 conforma una subsecuencia.</li> </ul>"},{"location":"06-subsecuencias/#2-subsecuencias-jerarquicas","title":"2) Subsecuencias jer\u00e1rquicas","text":"<ul> <li>Las subsecuencias se incluyen unas en otras por niveles.</li> <li>No hay continuidad obligatoria entre subsecuencias del mismo nivel.</li> <li>Ejemplo cl\u00e1sico: Texto \u2192 P\u00e1rrafos \u2192 Oraciones \u2192 Palabras.</li> </ul>"},{"location":"06-subsecuencias/#patrones-de-tratamiento","title":"Patrones de tratamiento","text":"<p>A continuaci\u00f3n se muestran esquemas de recorrido reutilizables. Se asume el conjunto de acciones para secuencias: <code>ARR</code>, <code>AVZ</code>, <code>CREAR</code>, <code>ESCRIBIR</code>, <code>CERRAR</code>.</p> <p>Convenci\u00f3n: <code>S</code> es una secuencia de caracteres y <code>c</code> una variable car\u00e1cter.</p>"},{"location":"06-subsecuencias/#a-palabras-en-texto-pre-test-sobre-blancos","title":"A. Palabras en texto (pre-test sobre blancos)","text":"<p>Ignora palabras vac\u00edas (m\u00faltiples espacios). Cuenta palabras con contenido.</p> <pre><code>\nACCION ContarPalabras ES\nAMBIENTE\n\n  S: Secuencia de caracter\n  c: caracter\n  en_palabra: logico\n  total: entero\nPROCESO\n  ARR(S)\n  AVZ(S, c)\n  en_palabra := F\n  total := 0\n  Mientras c &lt;&gt; '#' Hacer           // '#' = fin de secuencia (ejemplo de marca)\n    Si c &lt;&gt; ' ' y no en_palabra Entonces\n      en_palabra := V               // inicia palabra con contenido\n      total := total + 1\n    FinSi\n    Si c = ' ' y en_palabra Entonces\n      en_palabra := F               // cerr\u00f3 la palabra al ver blanco\n    FinSi\n    AVZ(S, c)\n  FinMientras\n  ESC(\"Palabras con contenido:\", total)\nFINACCION\n</code></pre>"},{"location":"06-subsecuencias/#b-longitud-maxima-de-palabra","title":"B. Longitud m\u00e1xima de palabra","text":"<p>Registra la longitud de la palabra m\u00e1s larga.</p> <pre><code>ACCION LongitudMaxPalabra ES\nAMBIENTE\n  S: Secuencia de caracter\n  c: caracter\n  en_palabra: logico\n  long_act, long_max: entero\nPROCESO\n  ARR(S)\n  AVZ(S, c)\n  en_palabra := F\n  long_act := 0\n  long_max := 0\n  Mientras c &lt;&gt; '#' Hacer\n    Si c &lt;&gt; ' ' Entonces\n      Si no en_palabra Entonces\n        en_palabra := V\n        long_act := 0\n      FinSi\n      long_act := long_act + 1\n    Contrario\n      Si en_palabra Entonces\n        en_palabra := F\n        Si long_act &gt; long_max Entonces\n          long_max := long_act\n        FinSi\n      FinSi\n    FinSi\n    AVZ(S, c)\n  FinMientras\n  // cierre si termin\u00f3 sin blanco final\n  Si en_palabra y long_act &gt; long_max Entonces\n     long_max := long_act\n  FinSi\n  ESC(\"Longitud m\u00e1xima:\", long_max)\nFINACCION\n</code></pre>"},{"location":"06-subsecuencias/#c-oraciones-en-texto-delimitador","title":"C. Oraciones en texto (delimitador '.')","text":"<p>Cuenta cu\u00e1ntas oraciones hay en el texto.</p> <pre><code>ACCION ContarOraciones ES\nAMBIENTE\n  S: Secuencia de caracter\n  c: caracter\n  en_contenido: logico\n  oraciones: entero\nPROCESO\n  ARR(S)\n  AVZ(S, c)\n  en_contenido := F\n  oraciones := 0\n\n  Mientras c &lt;&gt; '#' Hacer\n    Si c &lt;&gt; ' ' y c &lt;&gt; '.' Entonces\n      en_contenido := V\n    FinSi\n    Si c = '.' y en_contenido Entonces\n      oraciones := oraciones + 1    // cierre de oraci\u00f3n con contenido\n      en_contenido := F\n    FinSi\n    AVZ(S, c)\n  FinMientras\n  ESC(\"Cantidad de oraciones:\", oraciones)\nFINACCION\n</code></pre>"},{"location":"06-subsecuencias/#subsecuencias-enlazadas-bloques-de-tamano-fijo","title":"Subsecuencias enlazadas (bloques de tama\u00f1o fijo)","text":""},{"location":"06-subsecuencias/#d-contar-digitos-0-en-codigos-de-4-caracteres","title":"D. Contar d\u00edgitos '0' en c\u00f3digos de 4 caracteres","text":"<p>Suponga <code>S</code> contiene c\u00f3digos de 4 caracteres consecutivos; por cada bloque (subsecuencia) contar los ceros y acumular total general.</p> <pre><code>ACCION CerosEnCodigos4 ES\nAMBIENTE\n  S: Secuencia de caracter\n  c: caracter\n  i, ceros_cod, ceros_total: entero\nPROCESO\n  ARR(S)\n\n  ceros_total := 0\n  Repetir\n    ceros_cod := 0\n    Para i := 1 Hasta 4 Hacer\n      AVZ(S, c)\n      Si c = '#' Entonces         // marca: fin de secuencia\n         // fin abrupto: salir de la rutina\n         ESC(\"Total ceros:\", ceros_total)\n         regresar\n      FinSi\n      Si c = '0' Entonces\n         ceros_cod := ceros_cod + 1\n      FinSi\n    FinPara\n    // tratar el bloque completo\n    ESC(\"Ceros en c\u00f3digo:\", ceros_cod)\n    ceros_total := ceros_total + ceros_cod\n  Hasta que falso                   // contin\u00faa hasta ver '#'\nFINACCION\n</code></pre> <p>Si prefer\u00eds un fin controlado, reemplaz\u00e1 la condici\u00f3n de corte por lectura anticipada del primer car\u00e1cter del bloque y verific\u00e1 <code>'#'</code> antes de entrar al <code>Para</code>.</p>"},{"location":"06-subsecuencias/#subsecuencias-jerarquicas-anidadas","title":"Subsecuencias jer\u00e1rquicas (anidadas)","text":""},{"location":"06-subsecuencias/#e-texto-oraciones-palabras-promedio-de-longitud-de-palabra-por-oracion","title":"E. Texto \u2192 Oraciones \u2192 Palabras: promedio de longitud de palabra por oraci\u00f3n","text":"<p>Calcula, por cada oraci\u00f3n, el promedio de longitudes de sus palabras con contenido; al final emite el promedio global.</p> <pre><code>ACCION PromedioLongitudesPorOracion ES\nAMBIENTE\n  S: Secuencia de caracter\n  c: caracter\n  // nivel palabra\n  en_pal: logico\n  long_pal: entero\n  // nivel oraci\u00f3n\n  suma_long, cant_pal, cant_orac: entero\n  prom_orac, prom_global: real\nPROCESO\n\n  ARR(S)\n  AVZ(S, c)\n  // inicializaciones\n  en_pal := F\n  long_pal := 0\n  suma_long := 0\n  cant_pal := 0\n  cant_orac := 0\n  Mientras c &lt;&gt; '#' Hacer                      // recorre texto completo\n    // nivel palabra\n    Si c &lt;&gt; ' ' y c &lt;&gt; '.' Entonces\n      Si no en_pal Entonces\n        en_pal := V\n        long_pal := 0\n      FinSi\n      long_pal := long_pal + 1\n    Contrario\n      // cerr\u00f3 palabra por espacio o punto\n      Si en_pal Entonces\n        en_pal := F\n        cant_pal := cant_pal + 1\n        suma_long := suma_long + long_pal\n      FinSi\n      // si es punto, cierra oraci\u00f3n\n      Si c = '.' Entonces\n        cant_orac := cant_orac + 1\n        Si cant_pal &gt; 0 Entonces\n\n          prom_orac := suma_long / cant_pal\n          ESC(\"Promedio en oraci\u00f3n \", cant_orac, \": \", prom_orac)\n        Contrario\n          ESC(\"Oraci\u00f3n \", cant_orac, \" sin palabras\" )\n        FinSi\n        // reset para nueva oraci\u00f3n\n        suma_long := 0\n        cant_pal := 0\n      FinSi\n    FinSi\n    AVZ(S, c)\n  FinMientras\n  // cierre por fin sin punto final\n  Si en_pal Entonces\n    cant_pal := cant_pal + 1\n    suma_long := suma_long + long_pal\n  FinSi\n  Si cant_pal &gt; 0 Entonces\n    cant_orac := cant_orac + 1\n    prom_orac := suma_long / cant_pal\n    ESC(\"Promedio en oraci\u00f3n \", cant_orac, \": \", prom_orac)\n\n  FinSi\n  // promedio global (si se requiere)\n  // (podr\u00eda promediar los promedios por oraci\u00f3n o sobre todas las palabras del texto)\nFINACCION\n</code></pre>"},{"location":"06-subsecuencias/#buenas-practicas-y-chequeos","title":"Buenas pr\u00e1cticas y chequeos","text":"<ul> <li>Defin\u00ed claramente los delimitadores de inicio y fin (espacio, punto, marca <code>'#'</code>, tama\u00f1o fijo, etc.).</li> <li>Normaliz\u00e1 casos de borde: m\u00faltiples espacios, texto que no termina en delimitador, secuencias vac\u00edas.</li> <li>En encadenadas de tama\u00f1o fijo, valid\u00e1 longitud (evit\u00e1 bloques incompletos).</li> <li>Manten\u00e9 estado m\u00ednimo: banderas <code>en_palabra</code> / <code>en_contenido</code>, contadores y acumuladores.</li> <li>Document\u00e1 la pol\u00edtica de conteo: \u00bfse cuentan palabras vac\u00edas? \u00bfqui\u00e9n cierra la \u00faltima palabra si no hay blanco final?</li> </ul>"},{"location":"06-subsecuencias/#resumen","title":"Resumen","text":"<ul> <li>Las subsecuencias modelan segmentos consecutivos dentro de una secuencia.</li> <li>Enlazadas: bloques consecutivos (p. ej., c\u00f3digos de 4). Jer\u00e1rquicas: niveles (texto\u2192oraci\u00f3n\u2192palabra).</li> <li>Los patrones propuestos cubren conteo de palabras, longitudes, oraciones y tratamiento por bloques.</li> <li>El \u00e9xito del algoritmo depende de definir bien los delimitadores y normalizar casos de borde.</li> </ul>"},{"location":"07-registros/","title":"Registros","text":"<p>En esta p\u00e1gina se introducen los registros como tipo de dato estructurado: su motivaci\u00f3n, definici\u00f3n, componentes, clasificaci\u00f3n de campos (contenido/continente), campos clave (primaria/for\u00e1nea/secundaria), sintaxis en pseudoc\u00f3digo y ejemplos pr\u00e1cticos. El foco est\u00e1 en el almacenamiento en memoria interna y el tratamiento como unidad l\u00f3gica.</p>"},{"location":"07-registros/#vision-general","title":"Visi\u00f3n general","text":"<p>Un registro es un tipo de dato estructurado y est\u00e1tico compuesto por campos que pueden ser de diferentes tipos (heterog\u00e9neo). Se utiliza para representar entidades del mundo real (por ejemplo, estudiante, producto, medicamento).</p> <p>Ideas clave</p> <ul> <li>Estructura heterog\u00e9nea: cada campo puede ser entero, real, car\u00e1cter/alfanum\u00e9rico, l\u00f3gico u otro registro.</li> <li>Memoria interna: los registros viven en RAM mientras el algoritmo los procesa.</li> <li>Unidad de tratamiento: aunque tenga varios campos, el registro se considera una sola entidad; se accede a sus partes con el selector de campo.</li> </ul>"},{"location":"07-registros/#anatomia-de-un-registro","title":"Anatom\u00eda de un registro","text":"<p>Un campo se define por:</p> <ul> <li>Nombre (identificador \u00fanico dentro del registro)</li> <li>Tipo (entero, real, alfanum\u00e9rico, l\u00f3gico, u otra estructura)</li> <li>Tama\u00f1o (si aplica, p. ej., AN(30), N(8), etc.)</li> </ul>"},{"location":"07-registros/#selector-de-campo","title":"Selector de campo","text":"<p>Se utiliza para especificar a qu\u00e9 campo se accede dentro del registro. En pseudoc\u00f3digo lo representaremos con el punto (<code>.</code>): <code>reg.campo</code>.</p>"},{"location":"07-registros/#tipos-de-campos","title":"Tipos de campos","text":"<ul> <li>Campos contenido: almacenan un \u00fanico dato simple (p. ej., <code>edad: entero</code>).</li> <li>Campos continente: est\u00e1n compuestos por otros campos (p. ej., <code>fecha</code> con <code>d\u00eda/mes/a\u00f1o</code>; <code>telefono</code> con <code>caracter\u00edstica/n\u00famero</code>).</li> </ul> <p>Un campo continente puede anidarse: <code>persona.domicilio.ciudad</code>.</p>"},{"location":"07-registros/#campos-clave","title":"Campos clave","text":"<p>Un campo clave identifica un registro de manera \u00fanica dentro de un conjunto.</p>"},{"location":"07-registros/#por-formato","title":"Por formato","text":"<ul> <li>Clave simple: formada por un solo campo contenido (p. ej., <code>dni</code>).</li> <li>Clave compleja: formada por varios campos (usualmente continentales) p. ej., <code>fecha_vacunaci\u00f3n = (d\u00eda, mes, a\u00f1o)</code>.</li> </ul>"},{"location":"07-registros/#por-funcion","title":"Por funci\u00f3n","text":"<ul> <li>Clave primaria: identifica \u00fanicamente el registro (no se repite).</li> <li>Clave for\u00e1nea: referencia la clave primaria de otro conjunto de registros (relaci\u00f3n entre entidades).</li> <li>Clave secundaria: alternativa de acceso/ordenaci\u00f3n que no garantiza unicidad.</li> </ul>"},{"location":"07-registros/#sintaxis-pseudocodigo","title":"Sintaxis (pseudoc\u00f3digo)","text":""},{"location":"07-registros/#definicion-de-tipo-registro-y-variables","title":"Definici\u00f3n de tipo registro y variables","text":"<pre><code>// Definici\u00f3n del tipo\nESTUDIANTE = Registro\n  dni: N(8)\n  apellido: AN(30)\n  nombre: AN(30)\n  carrera: {ISI, IEM, IQ, LAR}    // ejemplo de tipo enumerado\n  ingreso: N(4)                    // a\u00f1o de ingreso\nFinRegistro\n\n// Variable de tipo registro\nalumno: ESTUDIANTE\n</code></pre>"},{"location":"07-registros/#acceso-a-campos-selector","title":"Acceso a campos (selector)","text":"<pre><code>alumno.dni := 45236555\nalumno.apellido := \"PEREZ\"\nalumno.nombre := \"JUAN\"\nalumno.carrera := ISI\nalumno.ingreso := 2023\n</code></pre>"},{"location":"07-registros/#campos-continente-anidacion","title":"Campos continente (anidaci\u00f3n)","text":"<pre><code>FECHA = Registro\n  dia: 1..31\n  mes: 1..12\n  anio: 1900..2100\nFinRegistro\n\nVACUNA = Registro\n  codigo: AN(13)\n  abreviatura: AN(4)\n  fecha_aplicacion: FECHA        // campo continente\nFinRegistro\n\nv: VACUNA\nv.fecha_aplicacion.dia := 23\nv.fecha_aplicacion.mes := 4\nv.fecha_aplicacion.anio := 2021\n</code></pre>"},{"location":"07-registros/#patrones-de-uso","title":"Patrones de uso","text":""},{"location":"07-registros/#1-carga-de-un-registro-entrada-de-datos","title":"1) Carga de un registro (entrada de datos)","text":"<pre><code>ACCION CargarEstudiante ES\nAMBIENTE\n  est: ESTUDIANTE\nPROCESO\n  Esc(\"DNI:\")          ; Leer(est.dni)\n  Esc(\"Apellido:\")     ; Leer(est.apellido)\n  Esc(\"Nombre:\")       ; Leer(est.nombre)\n  Esc(\"Carrera:\")      ; Leer(est.carrera)\n  Esc(\"A\u00f1o ingreso:\")  ; Leer(est.ingreso)\n  // A partir de aqu\u00ed, 'est' est\u00e1 completo y listo para ser usado\nFINACCION\n</code></pre>"},{"location":"07-registros/#2-emision-salida-formateada","title":"2) Emisi\u00f3n (salida formateada)","text":"<pre><code>\nSUBACCION ImprimirEstudiante(e: ESTUDIANTE) ES\n  Esc(\"[\", e.dni, \"] \", e.apellido, \", \", e.nombre, \" - \", e.carrera, \" (\", e.ingreso, \")\")\nFINSUBACCION\n</code></pre>"},{"location":"07-registros/#3-actualizacion-de-campos","title":"3) Actualizaci\u00f3n de campos","text":"<pre><code>SUBACCION ActualizarIngreso(e: ESTUDIANTE; nuevo: N(4)) ES\n  e.ingreso := nuevo\nFINSUBACCION\n</code></pre>"},{"location":"07-registros/#4-comparacion-por-clave-primaria","title":"4) Comparaci\u00f3n por clave primaria","text":"<pre><code>FUNCION MismaPersona(a, b: ESTUDIANTE): logico\n  devolver (a.dni = b.dni)\nFINFUNCION\n</code></pre> <p>En colecciones (listas, tablas, archivos), us\u00e1 la clave primaria para b\u00fasquedas y detecci\u00f3n de duplicados.</p>"},{"location":"07-registros/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Defin\u00ed primero el tipo de registro en el Ambiente y luego declar\u00e1s variables de ese tipo.</li> <li>Manten\u00e9 nombres claros de campos y respet\u00e1 dominios (rangos/enums) para validar consistencia.</li> <li>Consider\u00e1 clave primaria desde el dise\u00f1o: \u00bfqu\u00e9 campo(s) identifican sin ambig\u00fcedad?</li> <li>Trat\u00e1 el registro como unidad: encapsul\u00e1 emisiones, cargas y validaciones en subacciones.</li> <li>Para campos continentales, prefer\u00ed tipos expl\u00edcitos (como <code>FECHA</code>) en vez de tres enteros sueltos.</li> </ul>"},{"location":"07-registros/#errores-frecuentes","title":"Errores frecuentes","text":"<ul> <li>Omitir asignaci\u00f3n de subcampos en campos continentales (p. ej., setear <code>fecha</code> sin <code>d\u00eda/mes/a\u00f1o</code>).</li> <li>Duplicados por ausencia de verificaci\u00f3n de clave primaria.</li> <li>Inconsistencias de dominio (p. ej., <code>mes = 16</code>) por no validar rangos.</li> </ul>"},{"location":"07-registros/#resumen","title":"Resumen","text":"<ul> <li>Un registro modela una entidad con varios campos (posiblemente anidados).</li> <li>Se accede a los campos con un selector (<code>reg.campo</code>).</li> <li>Los campos clave son esenciales para identificaci\u00f3n (primaria), relaciones (for\u00e1nea) y acceso (secundaria).</li> <li>Dise\u00f1ar tipos claros y validar dominios mejora la consistencia y facilita su posterior uso en archivos y procesos.</li> </ul>"},{"location":"08-archivos/","title":"Archivos","text":"<p>Esta p\u00e1gina presenta el modelo de archivos aplicado a algoritmos: definici\u00f3n, organizaci\u00f3n f\u00edsica/l\u00f3gica, modos de acceso y el conjunto de sentencias de pseudoc\u00f3digo para abrir, leer, escribir y cerrar archivos. Se incluyen patrones de uso listos para reutilizar.</p>"},{"location":"08-archivos/#que-es-un-archivo","title":"Qu\u00e9 es un archivo","text":"<p>Un archivo es un conjunto homog\u00e9neo de registros relacionados entre s\u00ed y organizados para un prop\u00f3sito espec\u00edfico.</p> <ul> <li>Un registro est\u00e1 compuesto por campos (simples o compuestos).</li> <li>Los archivos se almacenan en memoria externa (disco, pendrive). Su procesamiento ocurre en memoria interna.</li> </ul> <p>Relaci\u00f3n jer\u00e1rquica: Archivo \u2192 Registros \u2192 Campos.</p>"},{"location":"08-archivos/#organizacion-de-archivos-fisicalogica","title":"Organizaci\u00f3n de archivos (f\u00edsica/l\u00f3gica)","text":""},{"location":"08-archivos/#secuencial","title":"Secuencial","text":"<p>Registros almacenados consecutivamente. Para acceder al registro n, es necesario pasar por los n\u22121 anteriores.</p>"},{"location":"08-archivos/#relativa-directa","title":"Relativa (directa)","text":"<p>El orden f\u00edsico no coincide necesariamente con el orden l\u00f3gico; el acceso se realiza por posici\u00f3n (relativa) o por una funci\u00f3n de direccionamiento.</p>"},{"location":"08-archivos/#indexada","title":"Indexada","text":"<p>Existen dos \u00e1reas:</p> <ul> <li>\u00c1rea de datos (primaria): registros organizados secuencialmente por clave.</li> <li>\u00c1rea de \u00edndices: estructura auxiliar (tabla de \u00edndices) que permite localizar r\u00e1pidamente por clave.</li> </ul>"},{"location":"08-archivos/#modos-de-acceso","title":"Modos de acceso","text":"<ul> <li>Secuencial: lectura en orden (desde el primero hasta el \u00faltimo).</li> <li>Directo: salta a una posici\u00f3n/clave espec\u00edfica.</li> <li>Mixto: combinaci\u00f3n (p. ej., ubicar por clave y luego leer secuencialmente a partir de all\u00ed).</li> </ul>"},{"location":"08-archivos/#tipos-de-datos-de-apoyo-util-en-definiciones","title":"Tipos de datos de apoyo (\u00fatil en definiciones)","text":"<ul> <li>Tipo conjunto (enumerado)</li> </ul> <p><code>pseudocode   Vocal = ('a','e','i','o','u')   Estado = ('Libre','Ocupado')</code> * Tipo rango</p> <p><code>pseudocode   Mes  = 1..12   Edad = 0..110</code></p> <p>Estos tipos facilitan validar dominios al definir campos de un registro.</p>"},{"location":"08-archivos/#sentencias-de-gestion-de-archivos-pseudocodigo","title":"Sentencias de gesti\u00f3n de archivos (pseudoc\u00f3digo)","text":"<p>Convenci\u00f3n: <code>Arch</code> es un archivo; <code>Reg</code> es una variable registro del formato del archivo.</p> <ul> <li>Abrir archivo</li> </ul> <p>```pseudocode   ABRIR E/(Arch)   // modo Entrada (solo lectura)   ABRIR /S(Arch)   // modo Salida  (solo escritura)</p> <p>```</p> <ul> <li>Leer y detectar fin</li> </ul> <p><code>pseudocode   LEER(Arch, Reg)      // trae el siguiente registro a 'Reg'   FDA(Arch)            // Fin De Archivo: verdadero si se lleg\u00f3 al final   NFDA(Arch)           // No Fin De Archivo: equivalente a NOT FDA(Arch)</code></p> <ul> <li>Escribir y cerrar</li> </ul> <p><code>pseudocode   ESCRIBIR(Arch, Reg)  // agrega/graba 'Reg' en el archivo (modo Salida)   CERRAR(Arch)</code></p> <p>Nota: algunos modelos did\u00e1cticos usan <code>FDA</code>; otros proveen <code>NFDA</code>. Eleg\u00ed uno y s\u00e9 consistente (o defin\u00ed <code>NFDA(Arch) := NO FDA(Arch)</code>).</p>"},{"location":"08-archivos/#definiciones-en-el-ambiente","title":"Definiciones en el Ambiente","text":"<pre><code>// 1) Formato del registro\naRegistro = Registro\n  url: AN(120)\n  fecha_pico: Registro\n      anio: 2000..2100\n      mes: 1..12\n      dia: 1..31\n    FinRegistro\n  reproducciones: N(9)\nFinRegistro\n\n// 2) Variables\ndatos: Archivo de aRegistro ordenado por url      // ejemplo\ning:  aRegistro\n</code></pre>"},{"location":"08-archivos/#patrones-de-uso-snippets-reutilizables","title":"Patrones de uso (snippets reutilizables)","text":""},{"location":"08-archivos/#1-emision-listado-simple","title":"1) Emisi\u00f3n (listado simple)","text":"<p>Recorre un archivo de entrada y emite sus campos.</p> <pre><code>ACCION Listar ES\nAMBIENTE\n  Arch: Archivo de aRegistro\n  Reg:  aRegistro\nPROCESO\n  ABRIR E/(Arch)\n  LEER(Arch, Reg)\n  Mientras NFDA(Arch) Hacer\n     Esc(Reg.url, ' ', Reg.fecha_pico.dia, '/', Reg.fecha_pico.mes, '/', Reg.fecha_pico.anio,\n         ' ', Reg.reproducciones)\n     LEER(Arch, Reg)\n  FinMientras\n  CERRAR(Arch)\nFINACCION\n</code></pre>"},{"location":"08-archivos/#2-cargageneracion-crear-archivo-consistente","title":"2) Carga/Generaci\u00f3n (crear archivo consistente)","text":"<p>Crea un archivo nuevo y graba registros ingresados por teclado.</p> <pre><code>ACCION Cargar ES\nAMBIENTE\n  Nuevo: Archivo de aRegistro ordenado por url\n  Reg:   aRegistro\n  cont:  entero\nPROCESO\n  ABRIR /S(Nuevo)\n  cont := 1\n  Mientras cont &lt;= 100 Hacer\n     Esc('Ingrese url, fecha pico (d m a) y reproducciones:')\n     Leer(Reg.url)\n     Leer(Reg.fecha_pico.dia)\n     Leer(Reg.fecha_pico.mes)\n     Leer(Reg.fecha_pico.anio)\n     Leer(Reg.reproducciones)\n     ESCRIBIR(Nuevo, Reg)\n     cont := cont + 1\n  FinMientras\n  CERRAR(Nuevo)\nFINACCION\n</code></pre>"},{"location":"08-archivos/#3-filtro-generacion-a-partir-de-entrada","title":"3) Filtro (generaci\u00f3n a partir de entrada)","text":"<p>Lee un archivo de entrada y escribe en salida seg\u00fan una condici\u00f3n.</p> <pre><code>ACCION FiltrarPorFecha ES\nAMBIENTE\n  In:  Archivo de aRegistro\n  Out: Archivo de aRegistro\n  R:   aRegistro\nPROCESO\n  ABRIR E/(In)\n  ABRIR /S(Out)\n  LEER(In, R)\n  Mientras NFDA(In) Hacer\n     Si (R.fecha_pico.mes = 5) y (R.fecha_pico.dia = 1) Entonces\n        ESCRIBIR(Out, R)\n     FinSi\n     LEER(In, R)\n  FinMientras\n  CERRAR(In)\n  CERRAR(Out)\n\nFINACCION\n</code></pre>"},{"location":"08-archivos/#4-transformacion-a-multiples-salidas","title":"4) Transformaci\u00f3n a m\u00faltiples salidas","text":"<p>Desv\u00eda los registros a dos archivos distintos.</p> <pre><code>ACCION Particionar ES\nAMBIENTE\n  In:    Archivo de aRegistro\n  Top:   Archivo de aRegistro\n  Resto: Archivo de aRegistro\n  R: aRegistro\nPROCESO\n  ABRIR E/(In)\n  ABRIR /S(Top)\n  ABRIR /S(Resto)\n  LEER(In, R)\n  Mientras NFDA(In) Hacer\n     Si R.reproducciones &gt;= 100000 Entonces\n        ESCRIBIR(Top, R)\n     Contrario\n        ESCRIBIR(Resto, R)\n     FinSi\n     LEER(In, R)\n  FinMientras\n  CERRAR(In)\n  CERRAR(Top)\n  CERRAR(Resto)\nFINACCION\n</code></pre>"},{"location":"08-archivos/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li> <p>Defin\u00ed claramente el formato de registro y los dominios (rangos/enums) de cada campo.</p> </li> <li> <p>Gener\u00e1 archivos consistentes (campos en rango, tipos correctos, claves \u00fanicas si aplica).</p> </li> <li>En emisi\u00f3n/listados, separ\u00e1 lectura, tratamiento y salida para mayor claridad.</li> <li>Cerr\u00e1 siempre archivos con <code>CERRAR</code> para liberar recursos y persistir cambios.</li> <li>Eleg\u00ed el modo de organizaci\u00f3n acorde: secuencial (recorridos completos), relativa (acceso por posici\u00f3n), indexada (b\u00fasqueda por clave).</li> </ul>"},{"location":"08-archivos/#resumen","title":"Resumen","text":"<ul> <li>Un archivo agrupa registros homog\u00e9neos y reside en memoria externa.</li> <li>La organizaci\u00f3n define c\u00f3mo se guardan (secuencial/relativa/indexada) y el acceso c\u00f3mo se leen (secuencial/directo/mixto).</li> <li>Con <code>ABRIR</code>, <code>LEER</code>/<code>ESCRIBIR</code>, <code>FDA</code>/<code>NFDA</code> y <code>CERRAR</code> pod\u00e9s implementar emisi\u00f3n, carga, filtros y transformaciones.</li> </ul>"},{"location":"09-procesos-archivos/","title":"Procesos con Archivos","text":"<p>En esta p\u00e1gina se sistematizan los procesos sobre archivos: validaciones de calidad de datos, procesos individuales y m\u00faltiples, m\u00e1s patrones de pseudoc\u00f3digo listos para reutilizar. Estilo de documentaci\u00f3n: conciso, con ejemplos ejecutables en pseudoc\u00f3digo.</p>"},{"location":"09-procesos-archivos/#calidad-de-datos-en-archivos","title":"Calidad de datos en archivos","text":"<p>Antes de procesar, verific\u00e1 consistencia y congruencia de los registros.</p> <ul> <li> <p>Consistencia: cada campo respeta su formato y dominio (rango o conjunto permitido).</p> </li> <li> <p>Ej.: <code>FECHA = {anio: 2000..2100, mes: 1..12, dia: 1..31}</code>.</p> </li> <li> <p>Congruencia: la combinaci\u00f3n de campos es v\u00e1lida entre s\u00ed.</p> </li> <li> <p>Ej.: <code>31/02/2024</code> es incongruente aunque cada campo, por separado, tiene n\u00fameros v\u00e1lidos.</p> </li> </ul>"},{"location":"09-procesos-archivos/#tipos-de-validacion","title":"Tipos de validaci\u00f3n","text":"<ul> <li>Gruesa (intra\u2011registro): entre campos del mismo registro (p. ej., fecha v\u00e1lida del calendario).</li> <li>Fina (inter\u2011archivo): entre campos de archivos distintos (p. ej., DNI en <code>Comisiones</code> existe en <code>Legajos</code>).</li> </ul>"},{"location":"09-procesos-archivos/#snippet-validacion-de-fecha","title":"Snippet: validaci\u00f3n de fecha","text":"<pre><code>FUNCION FechaValida(f: FECHA): logico\n    devolver (2000 &lt;= f.anio &lt;= 2100) y (1 &lt;= f.mes &lt;= 12) y (1 &lt;= f.dia &lt;= 31) y\n            ((f.mes en {1,3,5,7,8,10,12} y f.dia &lt;= 31) o\n             (f.mes en {4,6,9,11}          y f.dia &lt;= 30) o\n             (f.mes = 2                    y f.dia &lt;= 29)) // simple: admite 29 sin chequear bisiesto\nFINFUNCION\n</code></pre>"},{"location":"09-procesos-archivos/#que-es-un-proceso","title":"\u00bfQu\u00e9 es un proceso?","text":"<p>Conjunto de operaciones que transforman datos de entrada (archivos) en resultados (salidas/archivos/listados). Al dise\u00f1ar, defin\u00ed:</p> <ol> <li>Entradas (fuentes, orden, claves)</li> <li>Transformaciones (reglas, acumulaciones, cortes)</li> <li>Salidas (listados, padrones, archivos generados)</li> </ol>"},{"location":"09-procesos-archivos/#clasificacion-general","title":"Clasificaci\u00f3n general","text":""},{"location":"09-procesos-archivos/#procesos-individuales","title":"Procesos individuales","text":"<p>Un solo archivo de entrada y 0 o 1 archivo de salida.</p> <p>Tipos frecuentes</p> <ul> <li>Carga/Generaci\u00f3n (crear archivo consistente)</li> <li>Emisi\u00f3n/Listador (salida impresa)</li> <li>Padr\u00f3n (listador + totales finales)</li> <li>Corte de control (padrones con totales parciales; ver p\u00e1gina 10\u2011corte\u2011control)</li> <li>Estad\u00edsticos (contabilizar por categor\u00edas con tabla de frecuencias)</li> </ul>"},{"location":"09-procesos-archivos/#procesos-multiples","title":"Procesos m\u00faltiples","text":"<p>Varios archivos de entrada y/o salida.</p> <p>Tipos frecuentes</p> <ul> <li>Apareo (merge) de archivos ordenados por la misma clave</li> <li>Intersecci\u00f3n/Uni\u00f3n/Diferencia entre archivos ordenados</li> <li>Maestro\u2013Detalle (actualizaciones)</li> <li>Generaci\u00f3n transformadora (split/partition a m\u00faltiples salidas)</li> </ul>"},{"location":"09-procesos-archivos/#patrones-de-procesos-individuales","title":"Patrones de procesos individuales","text":""},{"location":"09-procesos-archivos/#1-carga-generacion-de-archivo","title":"1) Carga (generaci\u00f3n de archivo)","text":"<pre><code>ACCION Carga ES\nAMBIENTE\n  TIPO REG = Registro\n      clave: AN(13)\n      fecha: FECHA\n      valor: N(9)\n  FinRegistro\n  Nuevo: Archivo de REG ordenado por clave\n  R: REG\n  i: entero\nPROCESO\n  ABRIR /S(Nuevo)\n  Para i := 1 Hasta 100 Hacer\n      Esc(\"clave, dia, mes, anio, valor:\")\n      Leer(R.clave); Leer(R.fecha.dia); Leer(R.fecha.mes); Leer(R.fecha.anio); Leer(R.valor)\n      Si FechaValida(R.fecha) Entonces\n          ESCRIBIR(Nuevo, R)\n      FinSi\n  FinPara\n  CERRAR(Nuevo)\nFINACCION\n</code></pre>"},{"location":"09-procesos-archivos/#2-emision-listador","title":"2) Emisi\u00f3n / Listador","text":"<pre><code>ACCION Listar ES\nAMBIENTE\n  A: Archivo de REG\n  R: REG\nPROCESO\n  ABRIR E/(A)\n  LEER(A, R)\n  Mientras NFDA(A) Hacer\n     Esc(R.clave, R.fecha.dia, '/', R.fecha.mes, '/', R.fecha.anio, R.valor)\n     LEER(A, R)\n  FinMientras\n  CERRAR(A)\nFINACCION\n</code></pre>"},{"location":"09-procesos-archivos/#3-padron-totales-finales","title":"3) Padr\u00f3n (totales finales)","text":"<pre><code>ACCION Padron ES\nAMBIENTE\n  A: Archivo de REG ordenado por clave\n  R: REG\n  total: entero\nPROCESO\n  total := 0\n  ABRIR E/(A)\n  LEER(A, R)\n  Mientras NFDA(A) Hacer\n     Esc(R.clave, R.valor)\n     total := total + 1\n     LEER(A, R)\n  FinMientras\n  Esc(\"Total de registros:\", total)\n  CERRAR(A)\nFINACCION\n</code></pre>"},{"location":"09-procesos-archivos/#4-estadistico-con-tabla-de-frecuencias","title":"4) Estad\u00edstico con tabla de frecuencias","text":"<pre><code>ACCION EstadisticoPorMes ES\nAMBIENTE\n  A: Archivo de REG\n  R: REG\n  freq: arreglo[1..12] de entero\n  m: entero\nPROCESO\n  Para m := 1 Hasta 12 Hacer freq[m] := 0 FinPara\n  ABRIR E/(A); LEER(A, R)\n  Mientras NFDA(A) Hacer\n      freq[R.fecha.mes] := freq[R.fecha.mes] + 1\n      LEER(A, R)\n  FinMientras; CERRAR(A)\n  Para m := 1 Hasta 12 Hacer Esc(\"Mes\", m, \":\", freq[m]) FinPara\nFINACCION\n</code></pre> <p>Corte de control se desarrolla con detalle en 10\u2011corte\u2011control.md (totales por niveles de clave).</p>"},{"location":"09-procesos-archivos/#patrones-de-procesos-multiples","title":"Patrones de procesos m\u00faltiples","text":""},{"location":"09-procesos-archivos/#5-apareo-merge-de-dos-archivos-ordenados-por-la-misma-clave","title":"5) Apareo (merge) de dos archivos ordenados por la misma clave","text":"<p>Combina <code>A</code> y <code>B</code> (ambos ordenados) en <code>C</code>.</p> <pre><code>\nACCION Apareo ES\nAMBIENTE\n  A, B, C: Archivo de REG // todos ordenados por 'clave'\n  RA, RB: REG\nPROCESO\n  ABRIR E/(A); ABRIR E/(B); ABRIR /S(C)\n  LEER(A, RA); LEER(B, RB)\n  Mientras NFDA(A) y NFDA(B) Hacer\n    Si RA.clave &lt; RB.clave Entonces\n        ESCRIBIR(C, RA); LEER(A, RA)\n    Sino Si RB.clave &lt; RA.clave Entonces\n        ESCRIBIR(C, RB); LEER(B, RB)\n    Sino // claves iguales \u2192 decidir pol\u00edtica (p.ej., preferir A)\n        ESCRIBIR(C, RA); LEER(A, RA); LEER(B, RB)\n    FinSi\n  FinMientras\n  // arrastre\n  Mientras NFDA(A) Hacer ESCRIBIR(C, RA); LEER(A, RA) FinMientras\n  Mientras NFDA(B) Hacer ESCRIBIR(C, RB); LEER(B, RB) FinMientras\n  CERRAR(A); CERRAR(B); CERRAR(C)\nFINACCION\n</code></pre>"},{"location":"09-procesos-archivos/#6-interseccion-claves-comunes-de-dos-archivos-ordenados","title":"6) Intersecci\u00f3n (claves comunes) de dos archivos ordenados","text":"<pre><code>ACCION Interseccion ES\nAMBIENTE\n  A, B, C: Archivo de REG // C = comunes\n  RA, RB: REG\nPROCESO\n  ABRIR E/(A); ABRIR E/(B); ABRIR /S(C)\n  LEER(A, RA); LEER(B, RB)\n  Mientras NFDA(A) y NFDA(B) Hacer\n     Si RA.clave = RB.clave Entonces\n        ESCRIBIR(C, RA)\n        LEER(A, RA); LEER(B, RB)\n     Sino Si RA.clave &lt; RB.clave Entonces\n        LEER(A, RA)\n     Sino\n        LEER(B, RB)\n     FinSi\n  FinMientras\n  CERRAR(A); CERRAR(B); CERRAR(C)\nFINACCION\n</code></pre>"},{"location":"09-procesos-archivos/#7-maestrodetalle-actualizacion","title":"7) Maestro\u2013Detalle (actualizaci\u00f3n)","text":"<p>Actualiza <code>Maestro</code> con movimientos de <code>Detalle</code> (ambos ordenados por clave).</p> <pre><code>ACCION MaestroDetalle ES\nAMBIENTE\n  Maestro: Archivo de REG\n  Detalle: Archivo de RegistroMov // {clave, delta}\n  Salida:  Archivo de REG\n  RM: REG; RD: RegistroMov\nPROCESO\n  ABRIR E/(Maestro); ABRIR E/(Detalle); ABRIR /S(Salida)\n\n  LEER(Maestro, RM); LEER(Detalle, RD)\n  Mientras NFDA(Maestro) Hacer\n     Mientras NFDA(Detalle) y RD.clave &lt; RM.clave Hacer LEER(Detalle, RD) FinMientras\n     Mientras NFDA(Detalle) y RD.clave = RM.clave Hacer\n         RM.valor := RM.valor + RD.delta\n\n         LEER(Detalle, RD)\n     FinMientras\n     ESCRIBIR(Salida, RM)\n     LEER(Maestro, RM)\n  FinMientras\n  CERRAR(Maestro); CERRAR(Detalle); CERRAR(Salida)\nFINACCION\n</code></pre> <p>Variantes: Uni\u00f3n (todos los de A y B), Diferencia (de A no presentes en B), Join por clave compuesta.</p>"},{"location":"09-procesos-archivos/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Precondiciones: exig\u00ed orden por clave y defin\u00ed pol\u00edtica para claves duplicadas.</li> <li>Lectura anticipada + bucles con <code>NFDA</code> evitan leer fuera de rango.</li> <li>Separ\u00e1 responsabilidades: leer \u2192 tratar \u2192 emitir.</li> <li>Para estad\u00edsticas, eleg\u00ed estructuras internas (vectores/tablas) con dominios acotados.</li> <li>Document\u00e1 invariantes (p. ej., \u201cA y B est\u00e1n ordenados por <code>clave</code>\u201d).</li> </ul>"},{"location":"09-procesos-archivos/#resumen","title":"Resumen","text":"<ul> <li>Distingu\u00ed procesos individuales (carga, emisi\u00f3n, padr\u00f3n, estad\u00edstico, corte de control) y m\u00faltiples (apareo, intersecci\u00f3n, maestro\u2013detalle).</li> <li>Asegur\u00e1 consistencia y congruencia antes de procesar.</li> <li>Los patrones de esta p\u00e1gina cubren los casos m\u00e1s comunes y son base para dise\u00f1os m\u00e1s complejos (balanceos, consolidaciones, joins).</li> </ul>"},{"location":"10-corte-control/","title":"Corte de Control","text":"<p>El corte de control es un proceso individual sobre archivos que permite emitir informaci\u00f3n jer\u00e1rquica con totales parciales por niveles de clave y total general. Es una especializaci\u00f3n de los padrones (listados) donde, adem\u00e1s de recorrer, agrupamos y acumulamos por campos.</p> <p>\u26a0\ufe0f No todos los problemas se resuelven con corte de control. Se aplica cuando necesit\u00e1s agregar (contar, sumar, min/max, etc.) por grupos definidos por claves.</p>"},{"location":"10-corte-control/#requisitos-indispensables","title":"Requisitos indispensables","text":"<ol> <li>Clave compleja que identifique la jerarqu\u00eda de agrupaci\u00f3n (uno o m\u00e1s campos).</li> <li> <p>Archivo ordenado por los campos de corte (en el orden jer\u00e1rquico que se va a informar).</p> </li> <li> <p>Si el informe es por Ciudad \u2192 Raza, el archivo debe estar ordenado por Ciudad y Raza.</p> </li> <li>Si es por Mes \u2192 Tipo (p. ej., sat\u00e9lites por mes y por tipo), debe estar ordenado por Mes y Tipo.</li> </ol> <p>Si los datos no est\u00e1n ordenados, primero hay que ordenarlos o usar otro enfoque.</p>"},{"location":"10-corte-control/#anatomia-del-algoritmo","title":"Anatom\u00eda del algoritmo","text":"<ul> <li>Resguardo de claves: variables que guardan la clave actual (p. ej., <code>res_ciu</code>, <code>res_raza</code>).</li> <li> <p>Totalizadores por nivel: <code>tot_raza</code>, <code>tot_ciu</code>, <code>tot_gral</code>, etc.</p> </li> <li> <p>Lectura anticipada: leer el primer registro para inicializar resguardos y entrar al bucle.</p> </li> <li>Verificaci\u00f3n de corte: antes de tratar un registro, comparar sus claves con los resguardos.</li> <li>Cortes por niveles: al cambiar un nivel superior, primero cerrar (emitir y reiniciar) los niveles inferiores.</li> <li>Cierre final: al terminar el recorrido, forzar los cortes pendientes y emitir total general.</li> </ul>"},{"location":"10-corte-control/#patron-base-1-nivel-de-corte","title":"Patr\u00f3n base (1 nivel de corte)","text":"<pre><code>ACCION Corte1 ES\nAMBIENTE\n  REG = Registro\n    clave: ...   // campo de agrupaci\u00f3n\n    valor: ...   // campo a acumular/contar\n\n  FinRegistro\n  A: Archivo de REG ordenado por clave\n  R: REG\n  res_clave: ...\n  tot_nivel, tot_gral: entero\n\nSUBACCION VER_CORTE ES\n  Si R.clave &lt;&gt; res_clave Entonces\n     CORTE_NIVEL\n  FinSi\nFINSUBACCION\n\nSUBACCION CORTE_NIVEL ES\n  Esc(\"Total para \", res_clave, \": \", tot_nivel)\n  tot_gral := tot_gral + tot_nivel\n  tot_nivel := 0\n  res_clave := R.clave\nFINSUBACCION\n\nSUBACCION TRATAR_REGISTRO ES\n  // ejemplo: contar 1 por registro\n  tot_nivel := tot_nivel + 1\nFINSUBACCION\n\nPROCESO\n  tot_nivel := 0; tot_gral := 0\n  ABRIR E/(A)\n  LEER(A, R)\n  Si NFDA(A) Entonces\n     res_clave := R.clave        // resguardo inicial\n     Mientras NFDA(A) Hacer\n        VER_CORTE                // corta si cambi\u00f3 la clave\n        TRATAR_REGISTRO\n\n        LEER(A, R)\n     FinMientras\n     CORTE_NIVEL                 // cierre del \u00faltimo grupo\n     Esc(\"Total general: \", tot_gral)\n  FinSi\n  CERRAR(A)\nFINACCION\n</code></pre> <p>Idea: ver corte \u2192 tratar \u2192 leer. El orden ayuda a detectar el cambio antes de acumular en el grupo equivocado.</p>"},{"location":"10-corte-control/#patron-de-2-niveles-nivel-2-nivel-1","title":"Patr\u00f3n de 2 niveles (Nivel 2 \u2192 Nivel 1)","text":"<p>Ejemplo cl\u00e1sico: Ciudad (nivel 2) \u2192 Raza (nivel 1). Contar mascotas con peso &gt; 5 kg por Raza y Ciudad, y total general.</p> <pre><code>ACCION Corte2 ES\nAMBIENTE\n  Mascota = Registro\n    Clave = Registro\n      Ciudad: AN(30)\n      Raza:   AN(20)\n      Nombre: AN(30)\n    FinRegistro\n    Color: AN(10)\n    Peso:  N(4,2)\n  FinRegistro\n  A: Archivo de Mascota ordenado por Clave.Ciudad, Clave.Raza\n  M: Mascota\n\n  res_ciu: AN(30)\n  res_raza: AN(20)\n\n  tot_raza, tot_ciu, tot_gral: entero\n\nSUBACCION VER_CORTE ES\n  Si M.Clave.Ciudad &lt;&gt; res_ciu Entonces\n     CORTE_CIUDAD\n  Sino Si M.Clave.Raza &lt;&gt; res_raza Entonces\n     CORTE_RAZA\n  FinSi\nFINSUBACCION\n\nSUBACCION CORTE_RAZA ES\n  Esc(\"Total en ciudad \", res_ciu, \" de raza \", res_raza, \": \", tot_raza)\n  tot_ciu := tot_ciu + tot_raza\n  tot_raza := 0\n  res_raza := M.Clave.Raza\nFINSUBACCION\n\nSUBACCION CORTE_CIUDAD ES\n  CORTE_RAZA                         // primero cerrar nivel inferior\n  Esc(\"Total en ciudad \", res_ciu, \": \", tot_ciu)\n  tot_gral := tot_gral + tot_ciu\n  tot_ciu := 0\n  res_ciu := M.Clave.Ciudad\nFINSUBACCION\n\nSUBACCION TRATAR_REGISTRO ES\n  Si M.Peso &gt; 5 Entonces\n     tot_raza := tot_raza + 1\n  FinSi\nFINSUBACCION\n\nPROCESO\n  tot_raza := 0; tot_ciu := 0; tot_gral := 0\n  ABRIR E/(A)\n  LEER(A, M)\n  Si NFDA(A) Entonces\n     res_ciu := M.Clave.Ciudad\n     res_raza := M.Clave.Raza\n     Mientras NFDA(A) Hacer\n        VER_CORTE\n        TRATAR_REGISTRO\n        LEER(A, M)\n     FinMientras\n     CORTE_CIUDAD                    // cierre del \u00faltimo bloque (propaga corte de raza)\n\n     Esc(\"Total general (&gt;5 kg): \", tot_gral)\n  FinSi\n  CERRAR(A)\nFINACCION\n</code></pre> <p>Regla de oro: cuando cambia un nivel superior, hay que cerrar primero todos los niveles inferiores.</p>"},{"location":"10-corte-control/#patron-de-3-niveles-escalable","title":"Patr\u00f3n de 3+ niveles (escalable)","text":"<p>La idea se generaliza: <code>VER_CORTE</code> compara desde el nivel m\u00e1s alto al m\u00e1s bajo; cada <code>CORTE_k</code> llama al corte del nivel inmediato inferior antes de emitir y reiniciar su totalizador.</p> <pre><code>// Esqueleto para N niveles (L3 &gt; L2 &gt; L1)\n// Si cambia L3 \u2192 CORTE_L3 (que llama a CORTE_L2 \u2192 que llama a CORTE_L1)\n// Si cambia L2 \u2192 CORTE_L2 (que llama a CORTE_L1)\n// Si cambia L1 \u2192 CORTE_L1\n</code></pre> <p>En informes complejos, conviene modularizar cortes por nivel y mantener nombres claros (<code>res_l1</code>, <code>tot_l1</code>, etc.).</p>"},{"location":"10-corte-control/#variantes-de-tratamiento","title":"Variantes de tratamiento","text":"<ul> <li>Conteos (registros, casos que cumplen una condici\u00f3n)</li> <li>Sumas (acumular un campo num\u00e9rico)</li> <li>Min/Max (acompa\u00f1ados de la clave del mejor/peor)</li> <li>Promedios (sumas + conteos por nivel)</li> <li>Porcentajes (necesitan conocer <code>tot_nivel</code> y <code>tot_superior</code>)</li> </ul> <p>El bloque <code>TRATAR_REGISTRO</code> cambia seg\u00fan la m\u00e9trica.</p>"},{"location":"10-corte-control/#casos-de-aplicacion-y-no-aplicacion","title":"Casos de aplicaci\u00f3n y no aplicaci\u00f3n","text":"<ul> <li>\u2714\ufe0f Aplicaci\u00f3n: \u201cEmitir totales de sat\u00e9lites por mes y por tipo\u201d \u2192 ordenar por Mes, Tipo.</li> <li>\u274c No aplicaci\u00f3n (tal cual): \u201cTotales de sat\u00e9lites en diciembre (sin agrupar)\u201d \u2192 alcanza con filtro + padr\u00f3n.</li> </ul>"},{"location":"10-corte-control/#errores-frecuentes","title":"Errores frecuentes","text":"<ul> <li>Archivo mal ordenado respecto de las claves de corte.</li> <li>Olvidar el cierre final de cortes \u2192 se pierde el \u00faltimo grupo.</li> <li>Inicializaciones incorrectas de resguardos/totalizadores.</li> <li>Orden de verificaci\u00f3n err\u00f3neo: cortar inferior antes que superior.</li> <li>Tratar antes de <code>VER_CORTE</code> \u2192 contamina el grupo anterior.</li> </ul>"},{"location":"10-corte-control/#checklist-rapido","title":"Checklist r\u00e1pido","text":"<ul> <li>[ ] \u00bfDefiniste clave(s) y orden del archivo?</li> <li>[ ] \u00bfHiciste lectura anticipada y resguardaste claves?</li> <li>[ ] \u00bfInvoc\u00e1s <code>VER_CORTE</code> antes de <code>TRATAR_REGISTRO</code>?</li> <li>[ ] \u00bfLos cortes se emiten de abajo hacia arriba (L1\u2192L2\u2192...)?</li> <li>[ ] \u00bfForz\u00e1s el cierre final al terminar?</li> </ul>"},{"location":"10-corte-control/#resumen","title":"Resumen","text":"<p>El corte de control estructura informes jer\u00e1rquicos por grupos: requiere clave compleja y archivo ordenado. Su patr\u00f3n esencial es: leer \u2192 ver corte \u2192 tratar \u2192 leer, con cortes en cascada desde el nivel inferior al superior y un cierre final que emite totales pendientes y el total general.</p>"}]}